<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for the Snake game */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Dark background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden; /* Prevent scrolling */
        }
        .game-wrapper {
            background-color: #2d3748; /* Slightly lighter dark background */
            padding: 2rem;
            border-radius: 1.5rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.5), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 95%; /* Responsive width */
            width: 600px; /* Max width for desktop */
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative; /* Needed for absolute positioning of modal */
        }
        h1 {
            color: #e2e8f0;
            margin-bottom: 1.5rem;
            font-size: 2.5rem; /* Larger heading */
            font-weight: 700;
        }
        canvas {
            background-color: #0f172a; /* Darker background for game board */
            border: 4px solid #4a5568; /* Border around the canvas */
            border-radius: 0.75rem;
            display: block;
            margin-bottom: 1.5rem;
            /* Ensure canvas is responsive */
            width: 100%;
            height: auto; /* Maintain aspect ratio */
            max-width: 400px; /* Max width for square canvas */
            max-height: 400px; /* Max height for square canvas */
            opacity: 1; /* Default opacity */
            transition: opacity 1s ease-out; /* Smooth fade out transition */
        }
        canvas.fade-out {
            opacity: 0;
        }
        .game-info {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 400px;
            margin-bottom: 1.5rem;
            color: #cbd5e0;
            font-size: 1.25rem;
            font-weight: 600;
        }
        .controls {
            display: flex;
            flex-wrap: wrap; /* Allow buttons to wrap on smaller screens */
            justify-content: center;
            gap: 1rem; /* Space between buttons */
            width: 100%;
            max-width: 400px;
        }
        button {
            background-color: #667eea; /* Blue button */
            color: white;
            padding: 0.8rem 1.5rem;
            border-radius: 0.75rem;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.1);
            flex-grow: 1; /* Allow buttons to grow */
            min-width: 120px; /* Minimum width for buttons */
        }
        button:hover {
            background-color: #5a67d8;
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        #message {
            color: #e2e8f0;
            font-size: 1.5rem;
            font-weight: 700;
            margin-top: 1.5rem;
            min-height: 2rem; /* Ensure space */
        }

        /* Directional pad for touch screens */
        .d-pad {
            display: grid;
            grid-template-areas:
                ". up ."
                "left . right"
                ". down .";
            gap: 5px;
            width: 150px;
            height: 150px;
            margin-top: 1.5rem;
            background-color: #4a5568;
            border-radius: 1rem;
            padding: 10px;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.3);
        }
        .d-pad button {
            background-color: #4299e1; /* Lighter blue for D-pad buttons */
            padding: 10px;
            border-radius: 0.5rem;
            font-size: 1.2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            flex-grow: unset; /* Override flex-grow from general button style */
            width: auto;
            min-width: unset;
        }
        .d-pad button:hover {
            background-color: #3182ce;
        }
        .d-pad .up { grid-area: up; }
        .d-pad .down { grid-area: down; }
        .d-pad .left { grid-area: left; }
        .d-pad .right { grid-area: right; }

        /* Hide D-pad on larger screens */
        @media (min-width: 768px) {
            .d-pad {
                display: none;
            }
        }

        /* Game Over Modal Styles */
        .game-over-modal {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent overlay */
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10; /* Above canvas */
            border-radius: 1.5rem; /* Match container border-radius */
        }
        .game-over-modal.hidden {
            display: none;
        }
        .modal-content {
            background-color: #2d3748;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.5), 0 4px 6px -2px rgba(0, 0, 0, 0.1);
            color: #e2e8f0;
            text-align: center;
            width: 80%;
            max-width: 300px;
        }
        .modal-content h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #ef4444; /* Red for Game Over */
        }
        .modal-content p {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
        }
        .modal-content button {
            margin-top: 1.5rem;
            background-color: #48bb78; /* Green for Play Again */
        }
        .modal-content button:hover {
            background-color: #38a169;
        }
    </style>
</head>
<body>
    <div class="game-wrapper">
        <h1>Snake Game</h1>
        <div class="game-info">
            <span>Score: <span id="score">0</span></span>
            <span>High Score: <span id="highScore">0</span></span>
        </div>
        <canvas id="gameCanvas"></canvas>
        <div class="controls">
            <button id="startButton">Start Game</button>
            <button id="resetButton">Reset Game</button>
        </div>
        <div id="message">Press Start to begin!</div>

        <!-- Directional Pad for Mobile -->
        <div class="d-pad">
            <button class="up" id="upButton">▲</button>
            <button class="left" id="leftButton">◀</button>
            <button class="right" id="rightButton">▶</button>
            <button class="down" id="downButton">▼</button>
        </div>

        <!-- Game Over Modal -->
        <div id="gameOverModal" class="game-over-modal hidden">
            <div class="modal-content">
                <h2>Game Over!</h2>
                <p>Your Score: <span id="finalScore">0</span></p>
                <p>High Score: <span id="finalHighScore">0</span></p>
                <button id="playAgainButton">Play Again?</button>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');
        const highScoreDisplay = document.getElementById('highScore');
        const messageDisplay = document.getElementById('message');
        const startButton = document.getElementById('startButton');
        const resetButton = document.getElementById('resetButton');

        // Directional pad buttons
        const upButton = document.getElementById('upButton');
        const downButton = document.getElementById('downButton');
        const leftButton = document.getElementById('leftButton');
        const rightButton = document.getElementById('rightButton');

        // Game Over Modal elements
        const gameOverModal = document.getElementById('gameOverModal');
        const finalScoreDisplay = document.getElementById('finalScore');
        const finalHighScoreDisplay = document.getElementById('finalHighScore');
        const playAgainButton = document.getElementById('playAgainButton');

        // Game constants
        const GRID_SIZE = 20; // Size of each segment of the snake/food
        let TILE_COUNT_X; // Number of tiles horizontally
        let TILE_COUNT_Y; // Number of tiles vertically
        const INITIAL_SNAKE_LENGTH = 3;
        const GAME_SPEED = 100; // Milliseconds per frame (lower = faster)
        const POWER_UP_SCORE_THRESHOLD = 3; // Score needed to potentially spawn a power-up
        const POWER_UP_DURATION = 5000; // Power-up duration in milliseconds (5 seconds)

        // Game state variables
        let snake = [];
        let food = {};
        let powerUp = null; // Stores power-up coordinates, null if not present
        let dx = 0; // Direction x (horizontal movement)
        let dy = 0; // Direction y (vertical movement)
        let score = 0;
        let highScore = localStorage.getItem('snakeHighScore') || 0; // Load high score from local storage
        let gameInterval; // To store the setInterval ID
        let isGameOver = false;
        let isGameStarted = false;
        let powerUpActiveOnBoard = false; // True if a power-up is currently drawn on the canvas
        let powerUpEnabled = false; // True if the snake currently has the power-up ability
        let powerUpTimer = null; // Timer for power-up duration
        let scoreSinceLastPowerUp = 0; // Tracks score since last power-up was generated/eaten

        /**
         * Sets up the canvas dimensions based on its current computed style.
         * This makes the canvas responsive to its parent container.
         */
        function setupCanvasDimensions() {
            const container = canvas.parentElement;
            // Get the computed width of the container, then ensure it's a multiple of GRID_SIZE
            let size = Math.min(container.clientWidth, container.clientHeight, 400); // Max 400px for a square game
            size = Math.floor(size / GRID_SIZE) * GRID_SIZE; // Ensure it's a multiple of GRID_SIZE

            canvas.width = size;
            canvas.height = size;

            TILE_COUNT_X = canvas.width / GRID_SIZE;
            TILE_COUNT_Y = canvas.height / GRID_SIZE;
        }

        /**
         * Initializes the game state.
         * Resets snake, score, direction, and places initial food.
         */
        function initializeGame() {
            setupCanvasDimensions(); // Set canvas size on initialization
            snake = [];
            // Place snake in the center of the canvas
            const startX = Math.floor(TILE_COUNT_X / 2);
            const startY = Math.floor(TILE_COUNT_Y / 2);
            for (let i = 0; i < INITIAL_SNAKE_LENGTH; i++) {
                snake.push({ x: startX - i, y: startY });
            }

            dx = GRID_SIZE; // Initial direction: moving right
            dy = 0;
            score = 0;
            isGameOver = false;
            isGameStarted = false;

            // Reset power-up state
            powerUp = null;
            powerUpActiveOnBoard = false;
            powerUpEnabled = false;
            scoreSinceLastPowerUp = 0;
            if (powerUpTimer) {
                clearTimeout(powerUpTimer);
                powerUpTimer = null;
            }

            scoreDisplay.textContent = score;
            highScoreDisplay.textContent = highScore;
            messageDisplay.textContent = 'Press Start to begin!';
            messageDisplay.style.color = '#e2e8f0'; // Reset message color

            // Hide game over modal and ensure canvas is visible
            gameOverModal.classList.add('hidden');
            canvas.classList.remove('fade-out');

            generateFood();
            draw(); // Draw initial state
            clearInterval(gameInterval); // Clear any existing game interval
            startButton.disabled = false;
            resetButton.disabled = false;
        }

        /**
         * Starts the game loop.
         */
        function startGame() {
            if (isGameStarted) return; // Prevent starting multiple times
            isGameStarted = true;
            messageDisplay.textContent = ''; // Clear start message
            gameInterval = setInterval(gameLoop, GAME_SPEED);
            startButton.disabled = true; // Disable start button once game begins
        }

        /**
         * Generates a new random position for the food, ensuring it's not on the snake or power-up.
         */
        function generateFood() {
            let newFoodX, newFoodY;
            let collision;

            do {
                newFoodX = Math.floor(Math.random() * TILE_COUNT_X);
                newFoodY = Math.floor(Math.random() * TILE_COUNT_Y);
                collision = false;
                // Check if new food position collides with any part of the snake
                for (let i = 0; i < snake.length; i++) {
                    if (snake[i].x === newFoodX && snake[i].y === newFoodY) {
                        collision = true;
                        break;
                    }
                }
                // Check if new food position collides with power-up
                if (!collision && powerUpActiveOnBoard && powerUp && powerUp.x === newFoodX && powerUp.y === newFoodY) {
                    collision = true;
                }
            } while (collision);

            food = { x: newFoodX, y: newFoodY };
        }

        /**
         * Generates a new random position for the power-up, ensuring it's not on the snake or food.
         */
        function generatePowerUp() {
            let newPowerUpX, newPowerUpY;
            let collision;

            do {
                newPowerUpX = Math.floor(Math.random() * TILE_COUNT_X);
                newPowerUpY = Math.floor(Math.random() * TILE_COUNT_Y);
                collision = false;
                // Check if new power-up position collides with any part of the snake
                for (let i = 0; i < snake.length; i++) {
                    if (snake[i].x === newPowerUpX && snake[i].y === newPowerUpY) {
                        collision = true;
                        break;
                    }
                }
                // Check if new power-up position collides with food
                if (!collision && food.x === newPowerUpX && food.y === newPowerUpY) {
                    collision = true;
                }
            } while (collision);

            powerUp = { x: newPowerUpX, y: newPowerUpY };
            powerUpActiveOnBoard = true;
            console.log('Power-up generated at:', powerUp);
        }

        /**
         * Draws the game elements on the canvas.
         */
        function draw() {
            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw food
            ctx.fillStyle = '#ef4444'; /* Red color for food */
            ctx.beginPath();
            ctx.arc(food.x * GRID_SIZE + GRID_SIZE / 2, food.y * GRID_SIZE + GRID_SIZE / 2, GRID_SIZE / 2 * 0.8, 0, Math.PI * 2);
            ctx.fill();

            // Draw power-up if active on board
            if (powerUpActiveOnBoard && powerUp) {
                ctx.fillStyle = '#9f7aea'; /* Purple color for power-up */
                ctx.fillRect(powerUp.x * GRID_SIZE, powerUp.y * GRID_SIZE, GRID_SIZE, GRID_SIZE);
                ctx.strokeStyle = '#6b46c1'; /* Darker purple border */
                ctx.strokeRect(powerUp.x * GRID_SIZE, powerUp.y * GRID_SIZE, GRID_SIZE, GRID_SIZE);
            }

            // Draw snake
            for (let i = 0; i < snake.length; i++) {
                const segment = snake[i];
                const x = segment.x * GRID_SIZE;
                const y = segment.y * GRID_SIZE;

                // If power-up is enabled, make snake glow or change color slightly
                if (powerUpEnabled) {
                    ctx.fillStyle = (i === 0) ? '#a78bfa' : '#8b5cf6'; /* Lighter purple for powered-up snake */
                    ctx.strokeStyle = '#7c3aed';
                } else {
                    ctx.fillStyle = (i === 0) ? '#34d399' : '#10b981'; /* Head is brighter green */
                    ctx.strokeStyle = '#065f46'; /* Darker green border */
                }

                if (i === 0) { // Draw the cobra head
                    drawCobraHead(x, y, ctx.fillStyle, ctx.strokeStyle);
                } else { // Draw normal snake body segment
                    ctx.fillRect(x, y, GRID_SIZE, GRID_SIZE);
                    ctx.strokeRect(x, y, GRID_SIZE, GRID_SIZE);
                }
            }
        }

        /**
         * Draws a 16-bit resolution cobra head.
         * @param {number} x - X coordinate of the top-left corner of the head tile.
         * @param {number} y - Y coordinate of the top-left corner of the head tile.
         * @param {string} fillColor - The fill color for the cobra head.
         * @param {string} strokeColor - The stroke color for the cobra head.
         */
        function drawCobraHead(x, y, fillColor, strokeColor) {
            ctx.save(); // Save the current canvas state
            ctx.translate(x + GRID_SIZE / 2, y + GRID_SIZE / 2); // Move origin to center of tile

            // Rotate based on direction
            if (dx === GRID_SIZE) { // Right
                ctx.rotate(0);
            } else if (dx === -GRID_SIZE) { // Left
                ctx.rotate(Math.PI);
            } else if (dy === -GRID_SIZE) { // Up
                ctx.rotate(-Math.PI / 2);
            } else if (dy === GRID_SIZE) { // Down
                ctx.rotate(Math.PI / 2);
            }

            ctx.fillStyle = fillColor;
            ctx.strokeStyle = strokeColor;
            ctx.lineWidth = 1; // For pixel art look

            // Draw head base (main square)
            ctx.fillRect(-GRID_SIZE / 2, -GRID_SIZE / 2, GRID_SIZE, GRID_SIZE);
            ctx.strokeRect(-GRID_SIZE / 2, -GRID_SIZE / 2, GRID_SIZE, GRID_SIZE);

            // Draw eyes (small squares)
            const eyeSize = GRID_SIZE / 4;
            const eyeOffset = GRID_SIZE / 8;
            ctx.fillStyle = 'black';
            ctx.fillRect(-GRID_SIZE / 2 + eyeOffset, -GRID_SIZE / 2 + eyeOffset, eyeSize, eyeSize); // Left eye
            ctx.fillRect(GRID_SIZE / 2 - eyeSize - eyeOffset, -GRID_SIZE / 2 + eyeOffset, eyeSize, eyeSize); // Right eye

            // Draw fangs (small triangles)
            ctx.fillStyle = 'white';
            const fangWidth = GRID_SIZE / 4;
            const fangHeight = GRID_SIZE / 4;
            const fangOffset = GRID_SIZE / 8; // Offset from center

            // Left fang
            ctx.beginPath();
            ctx.moveTo(-fangOffset, GRID_SIZE / 2 - fangHeight);
            ctx.lineTo(-fangOffset - fangWidth / 2, GRID_SIZE / 2);
            ctx.lineTo(-fangOffset + fangWidth / 2, GRID_SIZE / 2);
            ctx.closePath();
            ctx.fill();

            // Right fang
            ctx.beginPath();
            ctx.moveTo(fangOffset, GRID_SIZE / 2 - fangHeight);
            ctx.lineTo(fangOffset - fangWidth / 2, GRID_SIZE / 2);
            ctx.lineTo(fangOffset + fangWidth / 2, GRID_SIZE / 2);
            ctx.closePath();
            ctx.fill();

            ctx.restore(); // Restore the canvas state to before translation/rotation
        }


        /**
         * Updates the game state (snake movement, collision, eating food/power-up).
         */
        function gameLoop() {
            if (isGameOver) return;

            // Calculate new head position
            const head = { x: snake[0].x + dx / GRID_SIZE, y: snake[0].y + dy / GRID_SIZE };

            // Handle wall collision with or without power-up
            if (powerUpEnabled) {
                // Wrap around logic if power-up is enabled
                if (head.x < 0) head.x = TILE_COUNT_X - 1;
                else if (head.x >= TILE_COUNT_X) head.x = 0;
                if (head.y < 0) head.y = TILE_COUNT_Y - 1;
                else if (head.y >= TILE_COUNT_Y) head.y = 0;
            } else {
                // Normal wall collision (game over)
                if (head.x < 0 || head.x >= TILE_COUNT_X || head.y < 0 || head.y >= TILE_COUNT_Y) {
                    endGame();
                    return;
                }
            }

            // Self-collision (check if head collides with any part of the body)
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    endGame();
                    return;
                }
            }

            // Add new head to the front of the snake
            snake.unshift(head);

            // Check if snake ate food
            if (head.x === food.x && head.y === food.y) {
                score++;
                scoreDisplay.textContent = score;
                scoreSinceLastPowerUp++; // Increment score for power-up tracking
                generateFood(); // Generate new food

                // Check if it's time to generate a power-up
                if (scoreSinceLastPowerUp >= POWER_UP_SCORE_THRESHOLD && !powerUpActiveOnBoard && !powerUpEnabled) {
                    generatePowerUp();
                    scoreSinceLastPowerUp = 0; // Reset counter for next power-up
                }
            }
            // Check if snake ate power-up
            else if (powerUpActiveOnBoard && powerUp && head.x === powerUp.x && head.y === powerUp.y) {
                powerUpEnabled = true;
                powerUpActiveOnBoard = false; // Power-up is no longer on the board
                powerUp = null; // Clear power-up object

                messageDisplay.textContent = 'Power-up activated! Go through walls for 5 seconds!';
                messageDisplay.style.color = '#9f7aea'; // Purple for power-up message

                // Clear any existing power-up timer to prevent conflicts
                if (powerUpTimer) {
                    clearTimeout(powerUpTimer);
                }

                // Set a timer to disable the power-up
                powerUpTimer = setTimeout(() => {
                    powerUpEnabled = false;
                    messageDisplay.textContent = 'Power-up expired!';
                    messageDisplay.style.color = '#f6e05e'; // Yellow for expiration message
                    // Clear the message after a short delay
                    setTimeout(() => {
                        if (!isGameOver) messageDisplay.textContent = '';
                    }, 1500);
                }, POWER_UP_DURATION);
            }
            else {
                snake.pop(); // Remove tail if no food or power-up was eaten
            }

            draw(); // Redraw the game
        }

        /**
         * Ends the game, displays game over message, and updates high score.
         */
        async function endGame() {
            isGameOver = true;
            isGameStarted = false;
            clearInterval(gameInterval); // Stop the game loop immediately

            // Clear any active power-up timer
            if (powerUpTimer) {
                clearTimeout(powerUpTimer);
                powerUpTimer = null;
            }

            // --- Blinking Effect ---
            const blinkCount = 2; // Number of blinks (on/off cycles)
            const blinkDuration = 200; // Milliseconds for each phase (on or off)

            for (let i = 0; i < blinkCount; i++) {
                ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas (snake off)
                await new Promise(resolve => setTimeout(resolve, blinkDuration));
                draw(); // Draw snake (snake on)
                await new Promise(resolve => setTimeout(resolve, blinkDuration));
            }
            // Ensure the canvas is cleared after blinking before fade out
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // --- Fade Out Effect ---
            canvas.classList.add('fade-out');
            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for fade-out duration (1s)

            // --- Display Game Over Modal ---
            gameOverModal.classList.remove('hidden');
            finalScoreDisplay.textContent = score;
            // Update high score and display
            if (score > highScore) {
                highScore = score;
                localStorage.setItem('snakeHighScore', highScore);
            }
            finalHighScoreDisplay.textContent = highScore;
            highScoreDisplay.textContent = highScore; // Update main high score display too

            // Reset message display
            messageDisplay.textContent = '';
        }

        /**
         * Changes the direction of the snake based on keyboard input.
         * Prevents immediate reversal.
         * @param {Event} event - The keyboard event.
         */
        function changeDirection(event) {
            const keyPressed = event.key;
            const goingUp = dy === -GRID_SIZE;
            const goingDown = dy === GRID_SIZE;
            const goingLeft = dx === -GRID_SIZE;
            const goingRight = dx === GRID_SIZE;

            if (keyPressed === 'ArrowLeft' && !goingRight) {
                dx = -GRID_SIZE;
                dy = 0;
            } else if (keyPressed === 'ArrowUp' && !goingDown) {
                dx = 0;
                dy = -GRID_SIZE;
            } else if (keyPressed === 'ArrowRight' && !goingLeft) {
                dx = GRID_SIZE;
                dy = 0;
            } else if (keyPressed === 'ArrowDown' && !goingUp) {
                dx = 0;
                dy = GRID_SIZE;
            }
            // If the game hasn't started yet, start it on first valid key press
            if (!isGameStarted && (keyPressed.startsWith('Arrow'))) {
                startGame();
            }
        }

        /**
         * Changes the direction of the snake based on button clicks (for mobile).
         * @param {string} direction - The desired direction ('up', 'down', 'left', 'right').
         */
        function changeDirectionByButton(direction) {
            const goingUp = dy === -GRID_SIZE;
            const goingDown = dy === GRID_SIZE;
            const goingLeft = dx === -GRID_SIZE;
            const goingRight = dx === GRID_SIZE;

            if (direction === 'left' && !goingRight) {
                dx = -GRID_SIZE;
                dy = 0;
            } else if (direction === 'up' && !goingDown) {
                dx = 0;
                dy = -GRID_SIZE;
            } else if (direction === 'right' && !goingLeft) {
                dx = GRID_SIZE;
                dy = 0;
            } else if (direction === 'down' && !goingUp) {
                dx = 0;
                dy = GRID_SIZE;
            }
            // If the game hasn't started yet, start it on first valid button press
            if (!isGameStarted) {
                startGame();
            }
        }

        // Event Listeners
        window.onload = initializeGame; // Initialize game when page loads
        window.addEventListener('resize', initializeGame); // Re-initialize on window resize

        document.addEventListener('keydown', changeDirection); // Keyboard controls

        startButton.addEventListener('click', startGame);
        resetButton.addEventListener('click', initializeGame);
        playAgainButton.addEventListener('click', initializeGame); // Play Again button in modal

        // Add event listeners for directional pad buttons
        upButton.addEventListener('click', () => changeDirectionByButton('up'));
        downButton.addEventListener('click', () => changeDirectionByButton('down'));
        leftButton.addEventListener('click', () => changeDirectionByButton('left'));
        rightButton.addEventListener('click', () => changeDirectionByButton('right'));

        // Basic touch swipe detection for controls
        let touchStartX = 0;
        let touchStartY = 0;

        canvas.addEventListener('touchstart', e => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        });

        canvas.addEventListener('touchmove', e => {
            e.preventDefault(); // Prevent scrolling while swiping on canvas
        }, { passive: false });

        canvas.addEventListener('touchend', e => {
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;

            const dxTouch = touchEndX - touchStartX;
            const dyTouch = touchEndY - touchStartY;

            const sensitivity = 30; // Minimum swipe distance to register

            if (Math.abs(dxTouch) > Math.abs(dyTouch)) { // Horizontal swipe
                if (dxTouch > sensitivity) {
                    changeDirectionByButton('right');
                } else if (dxTouch < -sensitivity) {
                    changeDirectionByButton('left');
                }
            } else { // Vertical swipe
                if (dyTouch > sensitivity) {
                    changeDirectionByButton('down');
                } else if (dyTouch < -sensitivity) {
                    changeDirectionByButton('up');
                }
            }
        });

    </script>
</body>
</html>

